#include <include.h>
LOCAL os_timer_t cli_timer;
LOCAL os_timer_t ser_timer;
void user_test_func()
{/*{{{*/
		os_printf("the id value:%u\n",system_get_cpu_freq());
		os_printf("\nfreq value:%s\n",system_get_sdk_version());
}/*}}}*/
uint32 ICACHE_FLASH_ATTR
user_rf_cal_sector_set(void)
{/*{{{*/
    enum flash_size_map size_map = system_get_flash_size_map();
    uint32 rf_cal_sec = 0;

    switch (size_map) {
        case FLASH_SIZE_4M_MAP_256_256:
            rf_cal_sec = 128 - 5;
            break;

        case FLASH_SIZE_8M_MAP_512_512:
            rf_cal_sec = 256 - 5;
            break;

        case FLASH_SIZE_16M_MAP_512_512:
        case FLASH_SIZE_16M_MAP_1024_1024:
            rf_cal_sec = 512 - 5;
            break;

        case FLASH_SIZE_32M_MAP_512_512:
        case FLASH_SIZE_32M_MAP_1024_1024:
            rf_cal_sec = 1024 - 5;
            break;

        default:
            rf_cal_sec = 0;
            break;
    }

    return rf_cal_sec;
}/*}}}*/
void ICACHE_FLASH_ATTR
user_rf_pre_init(void)
{/*{{{*/
}/*}}}*/
void user_set_station_config()
{/*{{{*/
	struct station_config stationconf;
	wifi_set_opmode(0x01);
	os_printf("\nNew wifi mode:%u\n",wifi_get_opmode());
	char ssid[32]="D402";
	char password[64]="402gk402";
	stationconf.bssid_set=0;
	memset(stationconf.ssid,0,sizeof(stationconf.ssid));
	memset(stationconf.password,0,sizeof(stationconf.password));
	memcpy(stationconf.ssid,ssid,sizeof(ssid));
	memcpy(stationconf.password,password,sizeof(password));
	wifi_station_set_config(&stationconf);
	return ;
}/*}}}*/
void	wifi_handle_event_cb(System_Event_t	*evt)
{/*{{{*/
	 os_printf("event	%x\n",	evt->event);
	 switch	(evt->event)	{
					 case	EVENT_STAMODE_CONNECTED:
					 	 os_printf("connect	to	ssid	%s,	channel	%d\n",	
	 	 	 	 	 evt->event_info.connected.ssid,	
	 	 	 	 	 evt->event_info.connected.channel);
					 	 break;
					 case	EVENT_STAMODE_DISCONNECTED:
					 	 os_printf("disconnect	from	ssid	%s,	reason	%d\n",	
	 	 	 	 	 evt->event_info.disconnected.ssid,	
	 	 	 	 	 evt->event_info.disconnected.reason);
					 	 break;
					 case	EVENT_STAMODE_AUTHMODE_CHANGE:
					 				os_printf("mode:	%d	->	%d\n",	
	 	 	 	 	 evt->event_info.auth_change.old_mode,	
	 	 	 	 	 evt->event_info.auth_change.new_mode);
					 				break;
					 case	EVENT_STAMODE_GOT_IP:
					 	 os_printf("ip:"	IPSTR 	",mask:"	IPSTR	",gw:"	IPSTR,
					 	 	 	 	 		IP2STR(&evt->event_info.got_ip.ip), 
					 	 	 	 	 		IP2STR(&evt->event_info.got_ip.mask),
					 	 	 	 	 		IP2STR(&evt->event_info.got_ip.gw));
					 	 os_printf("\n");
					 	 break;
					 case	EVENT_SOFTAPMODE_STACONNECTED:
					 				os_printf("station:	"	MACSTR	"join,	AID	=	%d\n",	
	 	 	 	 MAC2STR(evt->event_info.sta_connected.mac),	
	 	 	 	 evt->event_info.sta_connected.aid);
					 				break;
	 				case	EVENT_SOFTAPMODE_STADISCONNECTED:
	 								os_printf("station:	"	MACSTR	"leave,	AID	=	%d\n",	
	 	 	 	 MAC2STR(evt->event_info.sta_disconnected.mac),	
	 	 	 	 evt->event_info.sta_disconnected.aid);
					 				break;
					 default:
									os_printf("station fail");
					 	 break;
	 }
}/*}}}*/
void espconn_recv_data_cb(void *arg,char *pdata,unsigned short len)
{/*{{{*/
	uint8 *pDat;
	const char str[]="Light ON";
	os_printf("recever data successful  yes haha");

/*	pDat=(uint8 *)malloc(len+1);
	memcpy(pDat,Pdata,len);
	*(pDat+len)=0;
	printf("the recviver data is %s",pDat);
	printf("\n\n");
	if(memcmp(pDat,str,sizeof(str)==0)
					{
						printf("NOw liogth is run\n");
						espconn_send(&user_tcp_conn,"New mLigeh is run\n",18);
					}
		free(pDat)*/
}/*}}}*/
void espconn_connect_cb(void *arg)
{
	os_printf("TCP connect successful");
}
void espconn_sent_cb(void *arg)
{
	os_printf("send successful");
}
void espconn_reconnect_cb(void *arg,sint8 err)
{
	os_printf("Tcp connect reconnect");
}
void espconn_tcp_client_connect()
{
	struct espconn *my_tcp_conn;
	my_tcp_conn=(struct espconn *)os_zalloc(sizeof(struct espconn));

	my_tcp_conn->type=ESPCONN_TCP;
	my_tcp_conn->state=ESPCONN_NONE;
	my_tcp_conn->proto.tcp=(esp_tcp *)os_zalloc(sizeof(esp_tcp));
	my_tcp_conn->proto.tcp->local_port=espconn_port();
	my_tcp_conn->proto.tcp->remote_port=8080;
	uint8 remoteip[4]={192,168,120,107};	
	os_memcpy(my_tcp_conn->proto.tcp->remote_ip,&remoteip,4);

	espconn_connect(my_tcp_conn);

}
void espconn_cli_timer(){
	struct ip_info ipconfig;
	os_timer_disarm(&cli_timer);
	wifi_get_ip_info(STATION_IF,&ipconfig);
	if(ipconfig.ip.addr){
		os_printf("connect successfun !!\n");
		os_printf("get ip_addr:%u\n",ipconfig.ip.addr);
		espconn_tcp_client_connect();
	}else{
		os_printf("connect fail !!\n");
		os_timer_setfn(&cli_timer,espconn_cli_timer,NULL);
		os_timer_arm(&cli_timer,500,0);
	}
}
void ICACHE_FLASH_ATTR
user_init(void)
{	
		uart_init(BIT_RATE_115200,BIT_RATE_115200);
		user_set_station_config();		
		wifi_set_event_handler_cb(wifi_handle_event_cb);
		os_timer_disarm(&cli_timer);
		os_timer_setfn(&cli_timer,espconn_cli_timer,NULL);
		os_timer_arm(&cli_timer,1100,0);
}
